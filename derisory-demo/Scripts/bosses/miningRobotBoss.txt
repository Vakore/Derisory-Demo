var miningRobotBossImgs = {
    "head":{x:1,y:1,w:42,h:26,shiftX:0,shiftY:0},
    "body":{x:1,y:28,w:16,h:35,shiftX:0,shiftY:0},
    "shoulder":{x:1,y:64,w:8,h:12,shiftX:0,shiftY:0},
    "arm":{x:1,y:77,w:12,h:61,shiftX:0,shiftY:0},
    "arm1":{x:14,y:77,w:12,h:61,shiftX:0,shiftY:0},
    "arm2":{x:27,y:77,w:12,h:61,shiftX:0,shiftY:0},
    "arm3":{x:40,y:77,w:12,h:61,shiftX:0,shiftY:0},
    "arm4":{x:53,y:77,w:12,h:61,shiftX:0,shiftY:0},
    "arm5":{x:66,y:77,w:12,h:61,shiftX:0,shiftY:0},
    "arm6":{x:79,y:77,w:12,h:61,shiftX:0,shiftY:0},
    "arm7":{x:92,y:77,w:12,h:61,shiftX:0,shiftY:0},
    "arm8":{x:105,y:77,w:12,h:61,shiftX:0,shiftY:0},


    "legTop":{x:1,y:139,w:10,h:3,shiftX:0,shiftY:0},
    "leg":{x:1,y:142,w:10,h:29,shiftX:0,shiftY:3},
    "leg1Top":{x:12,y:139,w:10,h:3,shiftX:0,shiftY:0},
    "leg1":{x:12,y:142,w:10,h:29,shiftX:0,shiftY:3},
    "leg2Top":{x:23,y:139,w:10,h:3,shiftX:0,shiftY:0},
    "leg2":{x:23,y:142,w:10,h:29,shiftX:0,shiftY:3},
    "leg3Top":{x:34,y:139,w:10,h:3,shiftX:0,shiftY:0},
    "leg3":{x:34,y:142,w:10,h:29,shiftX:0,shiftY:3},
    "leg4Top":{x:45,y:139,w:10,h:3,shiftX:0,shiftY:0},
    "leg4":{x:45,y:142,w:10,h:29,shiftX:0,shiftY:3},
    "leg5Top":{x:56,y:139,w:10,h:3,shiftX:0,shiftY:0},
    "leg5":{x:56,y:142,w:10,h:29,shiftX:0,shiftY:3},
    "leg6Top":{x:67,y:139,w:10,h:3,shiftX:0,shiftY:0},
    "leg6":{x:67,y:142,w:10,h:29,shiftX:0,shiftY:3},
    "leg7Top":{x:78,y:139,w:10,h:3,shiftX:0,shiftY:0},
    "leg7":{x:78,y:142,w:10,h:29,shiftX:0,shiftY:3},
    "leg8Top":{x:89,y:139,w:10,h:3,shiftX:0,shiftY:0},
    "leg8":{x:89,y:142,w:10,h:29,shiftX:0,shiftY:3},
    "leg9Top":{x:100,y:139,w:10,h:3,shiftX:0,shiftY:0},
    "leg9":{x:100,y:142,w:10,h:29,shiftX:0,shiftY:3},
    "leg10Top":{x:111,y:139,w:10,h:3,shiftX:0,shiftY:0},
    "leg10":{x:111,y:142,w:10,h:29,shiftX:0,shiftY:3},

    "leg11Top":{x:12,y:172,w:10,h:3,shiftX:0,shiftY:0},
    "leg11":{x:12,y:175,w:10,h:29,shiftX:0,shiftY:3},
    "leg12Top":{x:23,y:172,w:10,h:3,shiftX:0,shiftY:0},
    "leg12":{x:23,y:175,w:10,h:29,shiftX:0,shiftY:3},
    "leg13Top":{x:34,y:172,w:10,h:3,shiftX:0,shiftY:0},
    "leg13":{x:34,y:175,w:10,h:29,shiftX:0,shiftY:3},
    "leg14Top":{x:45,y:172,w:10,h:3,shiftX:0,shiftY:0},
    "leg14":{x:45,y:175,w:10,h:29,shiftX:0,shiftY:3},
    "leg15Top":{x:56,y:172,w:10,h:3,shiftX:0,shiftY:0},
    "leg15":{x:56,y:175,w:10,h:29,shiftX:0,shiftY:3},
    "leg16Top":{x:67,y:172,w:10,h:3,shiftX:0,shiftY:0},
    "leg16":{x:67,y:175,w:10,h:29,shiftX:0,shiftY:3},
    "leg17Top":{x:78,y:172,w:10,h:3,shiftX:0,shiftY:0},
    "leg17":{x:78,y:175,w:10,h:29,shiftX:0,shiftY:3},
    "fallingRock":{x:89,y:172,w:12,h:12,shiftX:0,shiftY:0},

    "scale":{x:86,y:5,w:62,h:93,shiftX:0,shiftY:0},
};

var fallingRock = function(x, y, velX, velY) {
    this.x = round(x);
    this.y = round(y);
    this.w = 12;
    this.h = 4;
    this.velX = velX;
    this.velY = velY;
    this.immuneTimers = [-10, -10];
    this.inWater = false;
    this.sprite = "fallingRock";
    this.ded = false;
    this.spinTimer = 0;
};
fallingRock.prototype.run = function() {
    this.spinTimer += 25;
    this.velY += 0.025;
    this.x += this.velX;
    this.y += this.velY;
    checkCollisions(this);
    hurtBox(this.x + 2, this.y + 2, this.h + 4, this.w - 4, 1);
};
fallingRock.prototype.draw = function() {
    //fill(255, 255, 255);
    //rect(this.x, this.y, this.w, this.h);
    save();
    translate(this.x + 6, this.y + 6);
    if (this.dir < 0) {translate(this.w, 0);}
    scale(this.dir, 1);
    rotate(Math.floor((this.spinTimer) / 90) * 90);
    image("miningRobotBossSprites", miningRobotBossImgs[this.sprite], -6, -6);
    restore();
};
fallingRock.prototype.wallTop = function() {
    this.velY = 0;
    this.velX = 0;
    this.ded = true;
};


var miningRobotExplodeParticle = function(x, y) {
    this.x = round(x);
    this.y = round(y);
    this.w = 12;
    this.h = 12;
    this.velX = random(-2, 2);
    this.velY = random(-2, -1);
    this.immuneTimers = [-10, -10];
    this.inWater = false;
    //this.sprite = "fallingRock";
    this.ded = false;
    this.aliveTimer = 300;
};
miningRobotExplodeParticle.prototype.run = function() {
    this.velY += 0.1;
    this.x += this.velX;
    this.y += this.velY;
    this.aliveTimer--;
    if (this.aliveTimer < 0) {
        this.ded = true;
    }
};
miningRobotExplodeParticle.prototype.draw = function() {
    //fill(255, 255, 255);
    //rect(this.x, this.y, this.w, this.h);
    save();
    translate(round(this.x), round(this.y));
    fill(0, 0, 255);
    rect(-1, 0, 3, 1);
    rect(0, -1, 1, 3);
    restore();
};

var miningRobotBoss = function(x, y) {
    this.x = x;
    this.y = y;
    this.w = 60;
    this.h = 92;
    this.velX = 0;
    this.velY = 0;
    this.immuneTimers = [-10, -10];
    this.inWater = false;
    this.sprites = {
        "head":{sprite:"head",x:9,y:0,dir:1},
        "body":{sprite:"body",x:22,y:25},
        "shoulderL":{sprite:"shoulder",x:16,y:28},
        "shoulderR":{sprite:"shoulder",x:36,y:28},
        "armL":{sprite:"arm",x:0,y:28},
        "armR":{sprite:"arm",x:48,y:28},
        "legL":{sprite:"leg",x:18,y:60},
        "legR":{sprite:"leg",x:32,y:60},
        "legLTop":{sprite:"legTop",x:18,y:60},
        "legRTop":{sprite:"legTop",x:32,y:60},
        "scale":{sprite:"scale",x:0,y:0},
    };
    this.legParametersL = {
       x:miningRobotBossImgs[this.sprites.legL.sprite].x,
       y:miningRobotBossImgs[this.sprites.legL.sprite].y,
       w:miningRobotBossImgs[this.sprites.legL.sprite].w,
       h:miningRobotBossImgs[this.sprites.legL.sprite].h,
       shiftX:miningRobotBossImgs[this.sprites.legL.sprite].shiftX,
       shiftY:miningRobotBossImgs[this.sprites.legL.sprite].shiftY,
    };
    this.legParametersR = {
       x:miningRobotBossImgs[this.sprites.legR.sprite].x,
       y:miningRobotBossImgs[this.sprites.legR.sprite].y,
       w:miningRobotBossImgs[this.sprites.legR.sprite].w,
       h:miningRobotBossImgs[this.sprites.legR.sprite].h,
       shiftX:miningRobotBossImgs[this.sprites.legR.sprite].shiftX,
       shiftY:miningRobotBossImgs[this.sprites.legR.sprite].shiftY,
    };
    this.spriteTimer = 1;
    this.hp = 50;
    this.ded = saveData.bosses.miningRobot;
    this.dir = 1;
    this.armTimer = 0;
    //this.attackList = generateBag([1,2,3,4]);
    this.attackList = [1, 1, 2, 3, 4];
    this.attackType = 0;
    this.attackTimer = 50;
    this.legWalkTimer = 0;
    this.goals = {
        "armL":{x:0,y:23},
        "armR":{x:48,y:23},
    };
    this.active = false;
    this.deathEffects = [
        [random(-1, 1), -3],
        [random(-1, 1), -2],
        [random(-2, -1), -2],
        [random(1, 2), -2],
        [random(-2, -1), -2],
        [random(1, 2), -2],
        [random(-2, -1), -3],
        [random(1, 2), -3],
    ];
};

miningRobotBoss.prototype.run = function() {
  if (this.hp > 0) {
    if (!this.active) {
        this.attackType = 0;
        this.attackTimer = 50;
        if (players[0].x > this.x - 200 && players[0].x < this.x + this.w + 200) {
            this.active = true;
            //reset time of this music track
            musicPlaying.nextTrack = "musicMiningRobotBoss";
            musicPlaying.smoothTransition = false;
            musicPlaying.volume = 0.7;
            resetSound("musicMiningRobotBoss");
        }
    }
    this.legParametersL = {
       x:miningRobotBossImgs[this.sprites.legL.sprite].x,
       y:miningRobotBossImgs[this.sprites.legL.sprite].y,
       w:miningRobotBossImgs[this.sprites.legL.sprite].w,
       h:miningRobotBossImgs[this.sprites.legL.sprite].h,
       shiftX:miningRobotBossImgs[this.sprites.legL.sprite].shiftX,
       shiftY:miningRobotBossImgs[this.sprites.legL.sprite].shiftY,
    };
    this.legParametersR = {
       x:miningRobotBossImgs[this.sprites.legR.sprite].x,
       y:miningRobotBossImgs[this.sprites.legR.sprite].y,
       w:miningRobotBossImgs[this.sprites.legR.sprite].w,
       h:miningRobotBossImgs[this.sprites.legR.sprite].h,
       shiftX:miningRobotBossImgs[this.sprites.legR.sprite].shiftX,
       shiftY:miningRobotBossImgs[this.sprites.legR.sprite].shiftY,
    };
    this.armTimer += 0.05;

    if (this.sprites.armL.y > Math.round(this.goals.armL.y)) {
        this.sprites.armL.y--;
    } else if (this.sprites.armL.y < Math.round(this.goals.armL.y)) {
        this.sprites.armL.y++;
    }

    if (this.sprites.armR.y > Math.round(this.goals.armR.y)) {
        this.sprites.armR.y--;
    } else if (this.sprites.armR.y < Math.round(this.goals.armR.y)) {
        this.sprites.armR.y++;
    }


    if (this.sprites.armL.x > Math.round(this.goals.armL.x)) {
        this.sprites.armL.x--;
    } else if (this.sprites.armL.x < Math.round(this.goals.armL.x)) {
        this.sprites.armL.x++;
    }

    if (this.sprites.armR.x > Math.round(this.goals.armR.x)) {
        this.sprites.armR.x--;
    } else if (this.sprites.armR.x < Math.round(this.goals.armR.x)) {
        this.sprites.armR.x++;
    }

    this.attackTimer--;
    this.sprites.armL.sprite = "arm";
    this.sprites.armR.sprite = "arm";
    if (this.attackTimer < 0) {
        this.velX = 0;
        this.legWalkTimer = 0;
        //this.attackType = Math.round(random(1, 4));
        //this.attackType = Math.round(random(0, 1)) ? 2 : 4;
        //this.attackType = 1;
        this.attackList.splice(0, 1);
        if (this.attackList.length == 0) {
            this.attackList = generateBag([1,2,3,4]);
            this.attackList.push(this.attackList[0]);
            this.attackType = 1;
        } else {
            this.attackType = this.attackList[0];
        }
        //this.attackType = 4;
        this.attackTimer = 320;
        if (players[0].y + (players[0].h / 2) < this.y && Math.round(random(0.2, 1)) == 1) {
            //this.attackType = 5;
            //this.attackTimer -= Math.round(random(30, 60));
        }
        if (this.attackType == 2 || this.attackType == 4) {this.attackTimer = 500;}
        if (this.attackType == 2) {
            this.attackTimer = 580;
            playSound("miningRobotBossHeadShake");
        }
    }
    if (this.attackType == 1 && this.velY == 0 && this.attackTimer > 230) {
        if (this.attackTimer == 310) {playSound("miningRobotBossJump");}
        this.velX = 0;
        if (this.sprites.head.y < 4) {
            this.sprites.head.y += 0.2;
            this.sprites.body.y += 0.2;
            this.sprites.shoulderL.y += 0.2;
            this.sprites.shoulderR.y += 0.2;
        }
        if (this.attackTimer < 250) {
            this.sprites.head.y = 0;
            this.sprites.body.y = 25;
            this.sprites.shoulderL.y = 28;
            this.sprites.shoulderR.y = 28;
            this.velY = -2.3;
            this.velX = this.dir;
            this.attackTimer = 230;
        }
    } else if (this.attackType == 1 && this.velY == 0 && this.attackTimer > 50) {
        this.velX = 0;
        this.attackTimer = 50;
        enemies.push(new electricShot(this.x + 24, this.y + this.h - 10, -2),
                     new electricShot(this.x + 26, this.y + this.h - 10, 2));
        playSound("miningRobotBossStomp" + floor(random(1, 3.99)), 0.35);
        shakeScreen(-1, 1, 1, 1, 5);
        this.sprites.body.y += 5;
        this.sprites.head.y += 5;
        this.sprites.shoulderL.y += 5;
        this.sprites.shoulderR.y += 5;
        //alert(this.sprites.body.y + ", " + this.sprites.head.y + ", " + this.sprites.shoulderL.y);
    } else if (this.attackType == 1 && this.attackTimer <= 30) {
        if (this.sprites.body.y > 25) {
            this.sprites.body.y -= 0.2;
            if (this.sprites.body.y < 25.2) {this.sprites.body.y = 25;}
        }
        if (this.sprites.head.y > 0) {
            this.sprites.head.y -= 0.2;
            if (this.sprites.head.y < 0.2) {this.sprites.head.y = 0;}
        }
        if (this.sprites.shoulderL.y > 28) {
            this.sprites.shoulderL.y -= 0.2;
            if (this.sprites.shoulderL.y < 28.2) {this.sprites.shoulderL.y = 28;}
        }
        if (this.sprites.shoulderR.y > 28) {
            this.sprites.shoulderR.y -= 0.2;
            if (this.sprites.shoulderR.y < 28.2) {this.sprites.shoulderR.y = 28;}
        }
    } else if (this.attackType == 2 && this.attackTimer > 500) {
        this.sprites.head.x = 9 + round(random(-1, 1));
    } else if (this.attackType == 2 && this.attackTimer < 500) {
        this.sprites.head.x = 9;
        this.legWalkTimer++;
        this.velX = this.dir;
        this.dir = (((players[0].x + players[0].w) > (this.x + this.w / 2)) ? 1 : -1);
        //this.sprites.legL.y = 60 - constrain(sin(this.legWalkTimer / 10) * 10, 0, 10);
        //this.sprites.legR.y = 60 - constrain(-sin(this.legWalkTimer / 10) * 10, 0, 10);
        this.legParametersL.y = miningRobotBossImgs[this.sprites.legL.sprite].y + constrain(sin(this.legWalkTimer / 5) * 10, 0, 10);
        this.legParametersL.h = miningRobotBossImgs[this.sprites.legL.sprite].h - constrain(sin(this.legWalkTimer / 5) * 10, 0, 10);
        this.legParametersR.y = miningRobotBossImgs[this.sprites.legR.sprite].y + constrain(-sin(this.legWalkTimer / 5) * 10, 0, 10);
        this.legParametersR.h = miningRobotBossImgs[this.sprites.legR.sprite].h - constrain(-sin(this.legWalkTimer / 5) * 10, 0, 10);
        if (constrain(sin((this.legWalkTimer - 1) / 5) * 20, 0, 20) != 0 && constrain(sin(this.legWalkTimer / 5) * 20, 0, 20) == 0) {
            shakeScreen(1, 1, 1, 1, 5);
            playSound("miningRobotBossStomp" + floor(random(1, 3.99)), 0.3);
        } else if (constrain(-sin((this.legWalkTimer - 1) / 5) * 20, 0, 20) != 0 && constrain(-sin(this.legWalkTimer / 5) * 20, 0, 20) == 0) {
            shakeScreen(-1, 1, 1, 1, 5);
            playSound("miningRobotBossStomp" + floor(random(1, 3.99)), 0.3);
        }
        if (sin(this.legWalkTimer / 5) > 0) {
            this.sprites.legL.x += 1;
            this.sprites.legR.x -= 1;
        } else {
            this.sprites.legL.x -= 1;
            this.sprites.legR.x += 1;
        }
        if (this.attackTimer > 200 && this.attackTimer <= 400 && Math.abs(sin(this.legWalkTimer / 5) * 10) <= 1.5 && this.sprites.legL.x <= 19) {
            this.legWalkTimer = 0;
            this.attackType = 2;
            this.attackTimer = 0;
            this.sprites.legL = {sprite:"leg",x:18,y:60};
            this.sprites.legR = {sprite:"leg",x:32,y:60};
        }
        this.sprites.legLTop.x = this.sprites.legL.x;
        this.sprites.legRTop.x = this.sprites.legR.x;
    } else if (this.attackType == 3) {
        if (this.attackTimer >= 25 && this.attackTimer < 310) {
            this.sprites.armL.sprite = "arm" + constrain(floor((300 - this.attackTimer) / 5), 1, 8);
            this.sprites.armR.sprite = "arm" + constrain(floor((300 - this.attackTimer) / 5), 1, 8);
        } else if (this.attackTimer < 25) {
            this.sprites.armL.sprite = "arm" + constrain(floor(this.attackTimer / 3), 1, 8);
            this.sprites.armR.sprite = "arm" + constrain(floor(this.attackTimer / 3), 1, 8);
        }
        this.velX = 0;
        if (this.attackTimer == 310) {playSound("miningRobotBossSlam1");}
        if (this.attackTimer < 150 && this.attackTimer > 50) {
            this.attackTimer = 30;
        } else if (this.attackTimer < 25 && this.attackTimer > 5 && this.attackTimer == round(this.attackTimer / 3) * 3) {
            if (this.attackTimer == 24) {
                playSound("miningRobotBossSlam2");
                shakeScreen(-1, 1, 1, 1, 5);
            }
            enemies.push(new electricShot(this.x + 0, this.y + this.h - 10, -2),
                         new electricShot(this.x + 48, this.y + this.h - 10, 2));
        }
    } else if (this.attackType == 4) {
        this.legWalkTimer++;
        this.legParametersL.y = miningRobotBossImgs[this.sprites.legL.sprite].y + constrain(sin(this.legWalkTimer / 5) * 20, 0, 20);
        this.legParametersL.h = miningRobotBossImgs[this.sprites.legL.sprite].h - constrain(sin(this.legWalkTimer / 5) * 20, 0, 20);
        this.legParametersR.y = miningRobotBossImgs[this.sprites.legR.sprite].y + constrain(-sin(this.legWalkTimer / 5) * 20, 0, 20);
        this.legParametersR.h = miningRobotBossImgs[this.sprites.legR.sprite].h - constrain(-sin(this.legWalkTimer / 5) * 20, 0, 20);
        if (constrain(sin((this.legWalkTimer - 1) / 5) * 20, 0, 20) != 0 && constrain(sin(this.legWalkTimer / 5) * 20, 0, 20) == 0) {
            shakeScreen(1, 1, 1, 1, 5);
            playSound("miningRobotBossStomp" + floor(random(1, 3.99)), 0.35);
            enemies.push(new fallingRock(this.x + random(-300, 300), 0, 0, 0));
        } else if (constrain(-sin((this.legWalkTimer - 1) / 5) * 20, 0, 20) != 0 && constrain(-sin(this.legWalkTimer / 5) * 20, 0, 20) == 0) {
            shakeScreen(-1, 1, 1, 1, 5);
            playSound("miningRobotBossStomp" + floor(random(1, 3.99)), 0.35);
            enemies.push(new fallingRock(players[0].x + random(-64, 64), 25, 0, 0));
        }
        if (this.attackTimer > 200 && this.attackTimer <= 400 && Math.abs(sin(this.legWalkTimer / 5) * 20) <= 1.5) {
            this.legWalkTimer = 0;
            this.attackTimer = 0;
            this.sprites.legL = {sprite:"leg",x:18,y:60};
            this.sprites.legR = {sprite:"leg",x:32,y:60};
            this.legParametersL.y = miningRobotBossImgs[this.sprites.legL.sprite].y;
            this.legParametersL.h = miningRobotBossImgs[this.sprites.legL.sprite].h;
            this.legParametersR.y = miningRobotBossImgs[this.sprites.legR.sprite].y;
            this.legParametersR.h = miningRobotBossImgs[this.sprites.legR.sprite].h;
        }
    } else if (this.attackType == 5) {
        
    } else {
        this.dir = (((players[0].x + players[0].w) > (this.x + this.w / 2)) ? 1 : -1);
    }
    this.goals.armL.x = 0;
    this.goals.armR.x = 48;
    this.sprites.legL.sprite = "leg";
    this.sprites.legLTop.sprite = "legTop";
    this.sprites.legR.sprite = "leg";
    this.sprites.legRTop.sprite = "legTop";
    if (this.velY == 0 && this.attackType == 1 && this.attackTimer > 230) {
        this.goals.armL.y = 28 + 4;
        this.goals.armR.y = 28 + 4;
        this.goals.armL.x = 4;
        this.goals.armR.x = 44;
        this.sprites.legL.sprite = "leg" + constrain(Math.floor((325 - this.attackTimer) / 5), 1, 10);
        this.sprites.legLTop.sprite = "leg" + constrain(Math.floor((325 - this.attackTimer) / 5), 1, 10) + "Top";
        this.sprites.legR.sprite = "leg" + constrain(Math.floor((325 - this.attackTimer) / 5), 1, 10);
        this.sprites.legRTop.sprite = "leg" + constrain(Math.floor((325 - this.attackTimer) / 5), 1, 10) + "Top";
    } else if (this.velY != 0 && this.attackType == 1) {
        this.sprites.legL.sprite = "leg10";
        this.sprites.legLTop.sprite = "leg10Top";
        this.sprites.legR.sprite = "leg10";
        this.sprites.legRTop.sprite = "leg10Top";
        this.goals.armL.y = 25 + this.velY * 2;
        this.goals.armR.y = 25 + this.velY * 2;
    } else if (this.attackType == 1 && this.attackTimer <= 50 && this.attackTimer > 29) {
        this.sprites.legL.sprite = "leg" + constrain(Math.floor(10 + (53 - this.attackTimer) / 3), 11, 17);
        this.sprites.legLTop.sprite = "leg" + constrain(Math.floor(10 + (53 - this.attackTimer) / 3), 11, 17) + "Top";
        this.sprites.legR.sprite = "leg" + constrain(Math.floor(10 + (53 - this.attackTimer) / 3), 11, 17);
        this.sprites.legRTop.sprite = "leg" + constrain(Math.floor(10 + (53 - this.attackTimer) / 3), 11, 17) + "Top";
        this.attackTimer -= 0.5;
    } else if (this.attackType == 1 && this.attackTimer > 0 && this.attackTimer < 29) {
        this.attackTimer += 0.5;
    } else if (this.attackType == 3) {
            this.goals.armL.x = -4;
            this.goals.armR.x = 52;
        if (this.attackTimer > 50) {
            this.goals.armL.y = 28 - 12;
            this.goals.armR.y = 28 - 12;
        } else {
            this.goals.armL.y = 28 + 4;
            this.goals.armR.y = 28 + 4;
            if (this.sprites.armL.y < 28 + 4) {
                this.sprites.armL.y += 3;
                this.sprites.armR.y += 3;
            }
        }
    } else if (this.attackType == 5) {
        this.goals.armL.x = -4;
        this.goals.armR.x = 52;
        if (this.attackTimer > 150) {
            this.goals.armL.y = 28 - 74;
            this.goals.armR.y = 28 - 74;
            if (this.sprites.armL.y > 28 - 74) {
                this.sprites.armL.y -= 3;
                this.sprites.armR.y -= 3;
            }
        } else if (this.attackTimer > 100) {
            this.goals.armL.y = 28 - 74;
            this.goals.armR.y = 28 - 74;
            this.goals.armL.x = 18;
            this.goals.armR.x = 30;
            if (this.sprites.armL.x < 18) {
                this.sprites.armL.x += 3;
                this.sprites.armR.x -= 3;
            }
            if (this.sprites.armL.y > 28 - 74) {
                this.sprites.armL.y -= 3;
                this.sprites.armR.y -= 3;
            }
        } else {
            this.goals.armL.y = 28 + 4;
            this.goals.armR.y = 28 + 4;
            if (this.sprites.armL.y < 28 + 4) {
                this.sprites.armL.y += 4;
                this.sprites.armR.y += 4;
            }
        }
    } else if (this.velY == 0) {
        this.goals.armL.y = 23 + sin(this.armTimer) * 2;
        this.goals.armR.y = 23 + sin(this.armTimer) * 2;
    } else {
        this.goals.armL.y = 23 - this.velY * 2;
        this.goals.armR.y = 23 - this.velY * 2;
    }

    this.velY += 0.05;
    this.x += this.velX;
    this.y += this.velY;
    this.isGrounded = false;
    checkCollisions(this);
  }
    if (this.hp > 0) {
        //arm collisions
        attackBox(this.x + this.sprites.armL.x, this.y + this.sprites.armL.y, 12, 61, this);
        hurtBox(this.x + this.sprites.armL.x + 1, this.y + this.sprites.armL.y + 4, 12 - 2, 61 - 8, 2);
        attackBox(this.x + this.sprites.armR.x, this.y + this.sprites.armR.y, 12, 61, this);
        hurtBox(this.x + this.sprites.armR.x + 1, this.y + this.sprites.armR.y + 4, 12 - 2, 61 - 8, 2);
        //leg collisions
        attackBox(this.x + this.sprites.legL.x, this.y + this.sprites.legL.y, 10, 32, this);
        hurtBox(this.x + this.sprites.legL.x + 1, this.y + this.sprites.legL.y + 2, 10 - 2, 32 - 4, 2);
        attackBox(this.x + this.sprites.legR.x, this.y + this.sprites.legR.y, 10, 32, this);
        hurtBox(this.x + this.sprites.legR.x + 1, this.y + this.sprites.legR.y + 2, 10 - 2, 32 - 4, 2);
        //body collisions
        attackBox(this.x + this.sprites.body.x, this.y + this.sprites.body.y, 16, 35, this);
        hurtBox(this.x + this.sprites.body.x + 1, this.y + this.sprites.body.y + 2, 16 - 2, 35 - 4, 2);
        //shoulder collisions
        attackBox(this.x + this.sprites.shoulderL.x, this.y + this.sprites.shoulderL.y, 8, 12, this);
        hurtBox(this.x + this.sprites.shoulderL.x + 1, this.y + this.sprites.shoulderL.y + 2, 8 - 2, 12 - 4, 2);
        attackBox(this.x + this.sprites.shoulderR.x, this.y + this.sprites.shoulderR.y, 8, 12, this);
        hurtBox(this.x + this.sprites.shoulderR.x + 1, this.y + this.sprites.shoulderR.y + 2, 8 - 2, 12 - 4, 2);
        //head collisions
        attackBox(this.x + this.sprites.head.x + 7, this.y + this.sprites.head.y + 2, 42 - 14, 26 - 4, this);
        hurtBox(this.x + this.sprites.head.x + 7 + 1, this.y + this.sprites.head.y + 2 + 1, (42 - 14) - 2, (26 - 4) - 2, 2);
        attackBox(this.x + this.sprites.head.x, this.y + this.sprites.head.y + 9, 42, 26 - 18, this);
        hurtBox(this.x + this.sprites.head.x + 2, this.y + this.sprites.head.y + 9 + 2, (42) - 4, (26 - 18) - 4, 2);
    } else {
        musicPlaying.nextTrack = "";
        musicPlaying.smoothTransition = true;
        if (!saveData.bosses.miningRobot) {
            saveData.spawnLocations[0] = 224;
            saveData.spawnLocations[1] = 178;
            saveData.bosses.miningRobot = true;
            saveGame(saveFile);
        }
      if (this.hp < -100) {
        this.sprites.head.x += this.deathEffects[0][0];
        this.sprites.body.x += this.deathEffects[1][0];
        this.sprites.armL.x += this.deathEffects[2][0];
        this.sprites.armR.x += this.deathEffects[3][0];
        this.sprites.shoulderL.x += this.deathEffects[4][0];
        this.sprites.shoulderR.x += this.deathEffects[5][0];
        this.sprites.legL.x += this.deathEffects[6][0];
        this.sprites.legR.x += this.deathEffects[7][0];
        this.sprites.legLTop.x += this.deathEffects[6][0];
        this.sprites.legRTop.x += this.deathEffects[7][0];

        this.sprites.head.y += this.deathEffects[0][1];
        this.sprites.body.y += this.deathEffects[1][1];
        this.sprites.armL.y += this.deathEffects[2][1];
        this.sprites.armR.y += this.deathEffects[3][1];
        this.sprites.shoulderL.y += this.deathEffects[4][1];
        this.sprites.shoulderR.y += this.deathEffects[5][1];
        this.sprites.legL.y += this.deathEffects[6][1];
        this.sprites.legR.y += this.deathEffects[7][1];
        this.sprites.legLTop.y += this.deathEffects[6][1];
        this.sprites.legRTop.y += this.deathEffects[7][1];
        this.deathEffects[0][1] += 0.075;
        this.deathEffects[1][1] += 0.1;
        this.deathEffects[2][1] += 0.075;
        this.deathEffects[3][1] += 0.075;
        this.deathEffects[4][1] += 0.05;
        this.deathEffects[5][1] += 0.05;
        this.deathEffects[6][1] += 0.075;
        this.deathEffects[7][1] += 0.075;
      }
        if (this.hp <= 0) {
            this.hp--;
            if (this.hp >= -100 && this.hp == floor(this.hp / 20) * 20) {
                playSound("miningRobotBossSlam2", 0.4);
                var explodeX = this.x + this.w / 2 + random(-12, 12);
                var explodeY = this.y + this.h / 2 + random(-40, 40);
                for (var i = 0; i < 5; i++) {
                    enemies.push(new miningRobotExplodeParticle(explodeX, explodeY));
                }
                shakeScreen(-1, 1, 1, 1, 5);
            }
        }
        if (this.sprites.shoulderR.y >= 256) {
            this.ded = true;
        }
    }
};

miningRobotBoss.prototype.wallTop = function() {
    this.velY = 0;
};
miningRobotBoss.prototype.wallBottom = function() {};
miningRobotBoss.prototype.wallLeft = function() {
    this.velX = 0;
};
miningRobotBoss.prototype.wallRight = function() {
    this.velX = 0;
};
miningRobotBoss.prototype.takeDamage = function(amount, kb) {
    this.hp -= amount;
    playSound("miningRobotBossDamage", 0.2);
};

miningRobotBoss.prototype.draw = function() {
    save();
    translate(round(this.x), round(this.y));
    if (this.dir < 0) {translate(this.w, 0);}
    scale(this.dir, 1);
    //rect(40, 10, 5, 10);
    if (checkBlinking(this)) {
        //image("miningRobotBossSprites", miningRobotBossImgs[this.sprites.scale.sprite], this.sprites.scale.x, this.sprites.scale.y);
        image("miningRobotBossSprites", miningRobotBossImgs[this.sprites.shoulderL.sprite], this.sprites.shoulderL.x, this.sprites.shoulderL.y);
        save();
        translate(this.sprites.shoulderR.x + 8, this.sprites.shoulderR.y);
        scale(-1, 1);
        image("miningRobotBossSprites", miningRobotBossImgs[this.sprites.shoulderR.sprite], 0, 0);
        restore();


        image("miningRobotBossSprites", miningRobotBossImgs[this.sprites.armL.sprite], this.sprites.armL.x, this.sprites.armL.y);
        save();
        translate(this.sprites.armR.x + 12, this.sprites.armR.y);
        scale(-1, 1);
        image("miningRobotBossSprites", miningRobotBossImgs[this.sprites.armR.sprite], 0, 0);
        restore();


        image("miningRobotBossSprites", this.legParametersL, this.sprites.legL.x, this.sprites.legL.y);
        image("miningRobotBossSprites", miningRobotBossImgs[this.sprites.legLTop.sprite], this.sprites.legLTop.x, this.sprites.legLTop.y);
        save();
        translate(this.sprites.legR.x + 10, this.sprites.legR.y);
        scale(-1, 1);
        image("miningRobotBossSprites", this.legParametersR, 0, 0);
        restore();
        save();
        translate(this.sprites.legRTop.x + 10, this.sprites.legRTop.y);
        scale(-1, 1);
        image("miningRobotBossSprites", miningRobotBossImgs[this.sprites.legRTop.sprite], 0, 0);
        restore();

        image("miningRobotBossSprites", miningRobotBossImgs[this.sprites.body.sprite], this.sprites.body.x, this.sprites.body.y);

        save();
        translate(this.sprites.head.x, this.sprites.head.y);
        if (this.sprites.head.dir == -1) {
            translate(miningRobotBosImgs[this.sprites.head.sprite].w, 0);
            scale(-1, 1);
        }
        image("miningRobotBossSprites", miningRobotBossImgs[this.sprites.head.sprite], 0, 0);
        restore();
    }
    fill(255, 0, 0);
    restore();
};