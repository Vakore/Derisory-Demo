/*
ATTACKS:
1. Charge 'n Jump - Charges at the player, then jumps towards the player
2. Spit - Spits out acid at the player
3. Charge - Charges at one end of the screen to the other at a fast speed
*/
var redFlyBossImgs = {
    "hatch1":{x:1,y:76,w:73,h:24,shiftX:-16,shiftY:-2},
    "hatch2":{x:75,y:76,w:71,h:24,shiftX:-16,shiftY:-2},
    "hatch3":{x:147,y:76,w:71,h:24,shiftX:-16,shiftY:-2},
    "hatch4":{x:219,y:76,w:33,h:24,shiftX:0,shiftY:-2},
    "hatch5":{x:253,y:76,w:33,h:24,shiftX:0,shiftY:-2},
    "hatch6":{x:287,y:76,w:33,h:26,shiftX:0,shiftY:-4},
    "hatch7":{x:1,y:101,w:33,h:28,shiftX:0,shiftY:-6},
    "hatch8":{x:35,y:101,w:34,h:30,shiftX:0,shiftY:-8},
    "hatch9":{x:70,y:101,w:36,h:29,shiftX:0,shiftY:-7},
    "hatch10":{x:107,y:101,w:35,h:29,shiftX:0,shiftY:-7},
    "hatch11":{x:143,y:101,w:37,h:29,shiftX:0,shiftY:-7},

    "body":{x:1,y:1,w:26,h:14,shiftX:0,shiftY:0},
    "bodyTurn":{x:150,y:1,w:18,h:20,shiftX:4,shiftY:-4},
    "head":{x:1,y:16,w:14,h:14,shiftX:0,shiftY:0},
    "headChew1":{x:39,y:1,w:14,h:14,shiftX:0,shiftY:0},
    "headChew2":{x:54,y:1,w:14,h:14,shiftX:0,shiftY:0},
    "headChew3":{x:69,y:1,w:14,h:14,shiftX:0,shiftY:0},
    "headChew4":{x:84,y:1,w:14,h:14,shiftX:0,shiftY:0},
    "headSpit":{x:99,y:1,w:14,h:14,shiftX:0,shiftY:0},
    "headTurn":{x:114,y:1,w:14,h:14,shiftX:-7,shiftY:2},

    "wing1":{x:16,y:16,w:12,h:14,shiftX:0,shiftY:0},
    "wing2":{x:28,y:1,w:10,h:7,shiftX:0,shiftY:0},

    "legs1":{x:1,y:31,w:20,h:10,shiftX:0,shiftY:0},
    "legs2":{x:22,y:31,w:25,h:10,shiftX:-4,shiftY:0},
    "legs3":{x:48,y:31,w:34,h:10,shiftX:-8,shiftY:0},
    "legs4":{x:83,y:31,w:38,h:10,shiftX:-10,shiftY:0},
    "legs5":{x:122,y:31,w:40,h:10,shiftX:-11,shiftY:0},
    "legs6":{x:1,y:42,w:35,h:10,shiftX:-8,shiftY:0},
    "legs7":{x:37,y:42,w:29,h:10,shiftX:-4,shiftY:0},
    "legs8":{x:67,y:42,w:21,h:10,shiftX:0,shiftY:0},
    "legs9":{x:89,y:42,w:17,h:10,shiftX:3,shiftY:0},
    "legs10":{x:107,y:42,w:16,h:10,shiftX:3,shiftY:0},
    "legs11":{x:124,y:42,w:18,h:10,shiftX:2,shiftY:0},
    "legs12":{x:143,y:42,w:23,h:10,shiftX:-1,shiftY:0},
    "legs13":{x:167,y:42,w:22,h:10,shiftX:-3,shiftY:0},
    "legs14":{x:1,y:53,w:19,h:10,shiftX:0,shiftY:0},
    "legs15":{x:21,y:53,w:17,h:10,shiftX:2,shiftY:0},

    "legsAir1":{x:1,y:64,w:23,h:10,shiftX:-5,shiftY:0},
    "legsAir2":{x:25,y:64,w:25,h:10,shiftX:-7,shiftY:0},
    "legsAir3":{x:51,y:64,w:26,h:11,shiftX:-8,shiftY:0},
    "legsAir1Turn":{x:78,y:64,w:12,h:9,shiftX:3,shiftY:3},
    "legsAir2Turn":{x:91,y:64,w:13,h:8,shiftX:1,shiftY:3},
    "legsAir3Turn":{x:105,y:64,w:13,h:10,shiftX:-1,shiftY:3},

    "spitAir1":{x:61,y:16,w:11,h:12,shiftX:0,shiftY:-1},
    "spitAir2":{x:73,y:16,w:10,h:10,shiftX:0,shiftY:0},
    "spitAir3":{x:84,y:16,w:14,h:10,shiftX:-2,shiftY:0},
    "spitGround1":{x:99,y:16,w:16,h:8,shiftX:0,shiftY:-2},
    "spitGround2":{x:116,y:16,w:16,h:8,shiftX:0,shiftY:-2},
    "spitGround3":{x:133,y:16,w:16,h:7,shiftX:0,shiftY:-1},

    "cacoon1":{x:1,y:1,w:81,h:22,shiftX:0,shiftY:0},
    "cacoon2":{x:83,y:1,w:81,h:26,shiftX:0,shiftY:0},
    "cacoon3":{x:165,y:1,w:81,h:28,shiftX:0,shiftY:0},
    "cacoon4":{x:247,y:1,w:81,h:31,shiftX:0,shiftY:0},
    "cacoon5":{x:1,y:24,w:81,h:37,shiftX:0,shiftY:0},
    "cacoon6":{x:83,y:28,w:81,h:39,shiftX:0,shiftY:0},
    "cacoon7":{x:165,y:30,w:81,h:44,shiftX:0,shiftY:0},
    "cacoon8":{x:247,y:33,w:81,h:48,shiftX:0,shiftY:0},
    "cacoon9":{x:329,y:1,w:81,h:51,shiftX:0,shiftY:0},
    "cacoon10":{x:1,y:62,w:81,h:59,shiftX:0,shiftY:0},
    "cacoon11":{x:83,y:68,w:81,h:36,shiftX:0,shiftY:0},
    "cacoon12":{x:165,y:75,w:81,h:34,shiftX:0,shiftY:0},
    "cacoon13":{x:247,y:82,w:81,h:33,shiftX:0,shiftY:0},
    "cacoon14":{x:329,y:53,w:81,h:33,shiftX:0,shiftY:0},
    "cacoon15":{x:1,y:122,w:81,h:36,shiftX:0,shiftY:0},
    "cacoon16":{x:165,y:110,w:81,h:36,shiftX:0,shiftY:0},
    "cacoon17":{x:247,y:116,w:81,h:36,shiftX:0,shiftY:0},
    "cacoon18":{x:329,y:125,w:81,h:36,shiftX:0,shiftY:0},
    "cacoon19":{x:329,y:162,w:81,h:36,shiftX:0,shiftY:0},
    "cacoonFall1":{x:83,y:105,w:36,h:25,shiftX:0,shiftY:0},
    "cacoonFall2":{x:120,y:105,w:36,h:25,shiftX:0,shiftY:0},

    "door1":{x:124,y:159,w:28,h:48,shiftX:0,shiftY:0},
    "door2":{x:153,y:159,w:28,h:48,shiftX:0,shiftY:0},
    "door3":{x:182,y:159,w:28,h:48,shiftX:0,shiftY:0},
};

var redFlySpit = function(x, y, velX, velY) {
    this.x = x;
    this.y = y;
    this.w = 8;
    this.h = 8;
    this.velX = velX;
    this.velY = velY;
    this.immuneTimers = [-10, -10];
    this.inWater = false;
    this.aliveTimer = 240;
    this.sprite = "spitAir1";
    this.spriteTimer = 1;
    this.spriteCycle = 0;
    this.ded = false;
    this.dir = (random(0, 1) > 0.5) ? -1 : 1;
};
redFlySpit.prototype.run = function() {
    if (this.h == 8) {
        this.velY += 0.1;
    } else {
        this.aliveTimer--;
    }
    if (this.aliveTimer > 30) {
        hurtBox(this.x + 1, this.y + 1, this.h - 2, this.w - 2, 1);
    } else if (this.aliveTimer <= 0) {
        this.ded = true;
    }
    if (this.aliveTimer > 30) {
        this.x += this.velX;
        this.y += this.velY;
        checkCollisions(this);
    } else {
        this.y += 0.5;
    }
    this.spriteTimer += 0.25;
    if (this.spriteTimer >= 4) {
        this.spriteTimer = 1;
    }
    if (this.h == 8) {
        this.sprite = "spitAir" + floor(this.spriteTimer);
    } else {
        this.sprite = "spitGround" + floor(this.spriteTimer);
    }
    this.spriteCycle++;
    if (this.spriteCycle > 1) {
        this.spriteCycle = 0;
    }
};
redFlySpit.prototype.draw = function() {
    save();
    translate(this.x, this.y);
    if (this.dir < 0) {translate(this.w, 0);}
    scale(this.dir, 1);
    image("redFlyBossSprites", redFlyBossImgs[this.sprite], 0, 0);
    restore();
};
redFlySpit.prototype.wallTop = function() {
    if (this.w != 12) {playSound("redFlyBossSpitLand", 0.25);}
    this.velY = 0;
    this.velX = 0;
    this.w = 12;
    this.h = 4;
    this.x -= 2;
    this.y += 4;
};

var redFlyExplodeParticle = function(x, y, particleSize) {
    this.x = round(x);
    this.y = round(y);
    this.particleSize = particleSize;
    this.w = 12;
    this.h = 12;
    this.velX = random(-2, 2);
    this.velY = random(-2, -1);
    this.immuneTimers = [-10, -10];
    this.inWater = false;
    //this.sprite = "";
    this.ded = false;
    this.aliveTimer = 300;
};
redFlyExplodeParticle.prototype.run = function() {
    this.velY += 0.1;
    this.x += this.velX;
    this.y += this.velY;
    this.aliveTimer--;
    if (this.aliveTimer < 0) {
        this.ded = true;
    }
};
redFlyExplodeParticle.prototype.draw = function() {
    //fill(255, 255, 255);
    //rect(this.x, this.y, this.w, this.h);
    save();
    translate(round(this.x), round(this.y));
    fill(237, 38, 36);
    if (this.particleSize == 1) {
        rect(-1, 0, 3, 1);
        rect(0, -1, 1, 3);
    } else if (this.particleSize == 2) {
        rect(0, 0, 2, 4);
        rect(-1, 1, 4, 2);
    }
    restore();
};

var redFlyBoss = function(x, y) {
    this.skipCutscene = false;
    if (lastBossFaced == "bigRedFly") {this.skipCutscene = true;}
    this.hatchTimer = 1;
    this.immuneTimers = [-10, -10];
    this.inWater = false;
    this.x = x;
    this.y = y;
    this.w = 23;
    this.h = 22;

    //To determine how far the boss can go left or right. Tends to get buggy if it runs into a wall.
    this.minX = 72;
    this.maxX = 360;

    this.velX = 0;
    this.velY = 0;

    this.dir = 1;
    this.bodySprite = ["hatch1", 0, 0, true];
    this.headSprite = ["head", 22, -4, true];
    this.wingSprite1 = ["wing1", 3, -7, true];
    this.wingSprite2 = ["wing2", 9, -7, true];
    this.wingTimer = 0;
    this.legTimer = 1;


    this.walkTimer = 1;
    this.legSprite = ["legs1", 5, 12, true];
    this.spriteTimer = 0;
    this.turnTimer = 1;
    //this.flyFrames = ["idle1", "idle2"];
    this.attack = -1;
    this.attackTimer = 350;
    this.walkTo = 0;
    this.isGrounded = false;
    this.spitX = 0;
    this.spitY = 0;
    this.jumped = false;
    this.hp = 30;
    this.attackList = generateBag([1,2,3]);
    this.shaking = false;
    this.legPos = [
        {x:6,y:21,velY:0,xTo:6,xTo2:6,maxDist:18,isAnimating:false},
        {x:15,y:21,velY:0,xTo:15,xTo2:15,maxDist:16,isAnimating:false},
        {x:25,y:21,velY:0,xTo:25,xTo2:25,maxDist:18,isAnimating:false},
    ];
    this.ramSide = 1;
    this.dedTimer = 0;
    this.shakePosX1 = 0;
    this.shakePosX2 = 0;
    this.shakePosX3 = 0;
    this.shakePosX4 = 0;
};

redFlyBoss.prototype.run = function() {
    lastBossFaced = "bigRedFly";
    /*if (players[0].x < this.x) {
        this.velX -= 0.2;
    } else if (players[0].x > this.x) {
        this.velX += 0.2;
    }*/
    this.attackTimer--;
    if (this.attackTimer < 0) {
        //this.attack = floor(random(1, 3.9999));

        this.attack = this.attackList[0];
        this.attackList.splice(0, 1);
        if (this.attackList.length == 0) {
            this.attackList = generateBag([1,1,1,2,3]);
        }

        this.jumped = false;
        switch (this.attack) {
            case 1:
                this.attack = 0;
                //this.walkTo = random(16, 384);
                this.walkTo = constrain(players[0].x + random(-48, 48) - this.w / 2, this.minX, this.maxX);
                this.attackTimer = 256;
            break;
            case 2:
                this.attackTimer = 115;
            break;
            case 3:
                this.attackTimer = 500;
                this.walkTo = (this.x + this.w / 2 < 227) ? this.minX : this.maxX;
            break;
        }
    }

    this.spitX = this.x + this.w / 2 - 6 + ((this.dir > 0) ? 14 : -14);
    this.spitY = this.y - 4;
    this.headSprite[0] = "head";
    this.bodySprite[0] = "body";
    this.wingSprite1[0] = "wing1";
    this.wingSprite2[0] = "wing2";

    this.bodySprite[2] = 0;
    this.headSprite[2] = -4;
    this.wingSprite1[2] = -7;
    this.wingSprite2[2] = -7;
    if (this.attack == 0) {
        this.velX += (this.x < this.walkTo) ? 0.3 : -0.3;
        if ((this.x > this.walkTo) != (this.velX <= 0) && this.isGrounded) {
            this.attack = 1;
            this.attackTimer = 256;
            this.velX = 0;
        }
    } else if (this.attack == 1 && this.attackTimer > 220) {
        this.bodySprite[2] = 2;
        this.headSprite[2] = -2;
        this.wingSprite1[2] = -5;
        this.wingSprite2[2] = -5;
    } else if (this.attack == 1 && this.attackTimer < 220) {
        if (this.isGrounded && !this.jumped) {
            this.velY = -8;
            playSound("redFlyBossFly");
            this.velX = ((players[0].x + 7) > (this.x + (this.w / 2))) ? 1.5 : -1.5;
            this.jumped = true;
        } else if (this.isGrounded && this.attackTimer > 5) {
            this.attackTimer = 5;
            this.velX = 0;
            playSound("redFlyBossLand");
            shakeScreen(1, 1, 1, 1, 5);
        }
        if (this.velY < 0 && this.velY >= -0.3) {   
            playSound("redFlyBossFly");
        }
    } else if (this.attack == 2) {
        if (this.attackTimer >= 50) {
            this.velX = (players[0].x + 7 < this.x + this.w / 2) ? -0.01 : 0.01;
            this.x -= this.velX;
        } else if (this.attackTimer < 50 && this.attackTimer > 20 && this.attackTimer == round(this.attackTimer / 5) * 5
            && (((this.turnTimer > 0) ? 1 : -1) == ((players[0].x + 7 > this.x + this.w / 2) ? 1 : -1))
        ) {
            enemies.push(new redFlySpit(this.spitX, this.spitY, this.dir * random(2, 3), random(-1, 1)));
            this.velX = 0;
        } else if ((((this.turnTimer > 0) ? 1 : -1) != ((players[0].x + 7 > this.x + this.w / 2) ? 1 : -1)) && this.attackTimer > 50) {
            this.attackTimer++;
            this.velX = 0;
        }
        if (this.attackTimer == 50) {
            playSound("redFlyBossSpit", 0.25);
        }
        if (this.attackTimer < 50) {
            this.headSprite[0] = "headSpit";
        } else {
            this.headSprite[0] = "headChew" + constrain(floor((this.attackTimer - floor(this.attackTimer / 20) * 20) / 4), 1, 4);
        }
    } else if (this.attack == 3) {
        this.velX += (this.x < this.walkTo) ? 0.3 : -0.3;
        if (this.x >= this.maxX | this.x <= this.minX && this.isGrounded) {
            this.attack = 4;
            this.attackTimer = 150;
            this.velX = 0;
        }
    } else if (this.attack == 4) {
        if (this.attackTimer == floor(this.attackTimer / 10) * 10 && this.attackTimer > 50) {
            playSound("redFlyBossFly");
        }
        if (this.attackTimer > 80 && this.attackTimer < 85) {
            this.velX = (this.x + this.w / 2 > 227) ? -5 : 5;
            this.shaking = false;
        } else if (this.attackTimer > 85) {
            this.shaking = true;
                if (((this.turnTimer > 0) ? 1 : -1) == ((this.x + this.w / 2 > 227) ? -1 : 1)) {
                    this.velY = -0.59;
                } else {
                    this.attackTimer++;
                    this.shaking = false;
                }
            this.velX = (this.x + this.w / 2 > 227) ? -0.01 : 0.01;
            this.ramSide = (this.x + this.w / 2 > 227) ? 90 : 0;
        } else {
            this.velY = sin(this.x / 50 + this.ramSide);
        }
    }

    if (this.velX < -0.01 && this.turnTimer > 0 && this.isGrounded && this.attack != 1) {
        this.velX = -0.01;
    } else if (this.velX > 0.01 && this.timerTimer < 0 && this.isGrounded && this.attack != 1) {
        this.velX = 0.01;
    }
    if (this.attack != 4) {
        this.velX = constrain(this.velX, -3, 3);
    }
    this.velY += 0.2;

    //Taking knockback
    if (this.kbTimer > 0) {
        if (this.kbDir == 1) {
            //this.velX = this.kbTimer * 2;
        } else if (this.kbDir == -1) {
            //this.velX = -this.kbTimer * 2;
        } else if (this.kbDir == "Down") {
            //this.velY = this.kbTimer * 2;
        } else if (this.kbDir == "Up") {
            //this.velY = -this.kbTimer * 2;
        }
    }

    //Moving the RedFlyBoss based on its current X and Y velocities
    this.x += this.velX;
    this.y += this.velY;

    if (this.velX < 0) {
        this.turnTimer -= 0.1;
    } else if (this.velX > 0) {
        this.turnTimer += 0.1;
    }
    this.turnTimer = constrain(this.turnTimer, -1, 1);
    this.dir = (this.turnTimer > 0) ? 1 : -1;

    this.isGrounded = false;
    //COLLISION CODE
    checkCollisions(this);
    if (this.x + this.w > 432) {
        this.velX = 0;
        this.x = 432 - this.w;
    }
    //COLLISION CODE

    if (this.hp > 0) {
        //Body collisions
        attackBox(this.x, this.y, this.w, this.h, this);
        hurtBox(this.x + 2, this.y + 4, this.w - 4, this.h - 4, 1);
        //Head collisions
        attackBox(this.x + ((this.dir >= 1) ? 22 : 0) + ((this.dir <= -1) ? -12 : 0), this.y - 3, 12, 12, this);
        //hurtBox(this.x + 22, this.y - 3, 10, 10, 1);
    } else {
        this.velX = 0;
        this.attack = -1;
        musicPlaying.nextTrack = "";
        musicPlaying.smoothTransition = true;
        for (var i = 0; i < enemies.length; i++) {
            if (enemies[i].w == 8 && enemies[i].h == 8 || enemies[i].w == 12 && enemies[i].h == 4) {
                enemies[i].aliveTimer = constrain(enemies[i].aliveTimer, -30, 25);
            }
        }
        this.dedTimer++;
        if (this.dedTimer > 50) {
            this.shaking = true;
            this.headSprite[0] = "headSpit";
            if (this.dedTimer == floor(this.dedTimer / 4) * 4) {
                enemies.push(new redFlyExplodeParticle(this.x + this.w / 2 + floor(random(-5, 5)), this.y + this.h / 2 + floor(random(-5, 5)), 1));
            }
            if (this.dedTimer == floor(this.dedTimer / 10) * 10) {
                playSound("redFlyBossLand");
            }
        }
        if (this.dedTimer > 240) {
            playSound("redFlyBossLand");
            playSound("redFlyHatch");
            playSound("redFlyEggsHurt");
            playSound("redFlyBossDamage1");
            playSound("redFlyBossDamage2");
            playSound("redFlyBossDamage3");
            this.ded = true;
            vibrateGamepads(100, 50);
            enemies.push(new drinkPickup(227, 0, 1));
            for (var i = 0; i < 10; i++) {
                enemies.push(new redFlyExplodeParticle(this.x + this.w / 2 + floor(random(-5, 5)), this.y + this.h / 2 + floor(random(-5, 5)), 2));
            }
        }
        //this.ded = true;
    }

    this.spriteTimer += 0.3;
    if (this.spriteTimer >= 2) {
        this.spriteTimer = 0;
    }
    if (abs(this.turnTimer) < 0.5) {
        this.headSprite[0] = "headTurn";
        this.bodySprite[0] = "bodyTurn";
        this.wingSprite1[0] = 0;
        this.wingSprite2[0] = 0;
    }


    if (abs(this.velX) >= 0.2) {
        this.walkTimer += abs(this.velX) * 0.25;
    }
    if (floor(this.walkTimer) > 15) {
        this.walkTimer = 1;
    }
    if (abs(this.velX) <= 0.2) {
        this.walkTimer = 1;
    }
    this.legSprite[0] = "legs" + floor(this.walkTimer);

    if (this.isGrounded) {
        this.wingTimer = 0;
        this.legTimer = 1;
    } else if (!this.isGrounded) {
        this.walkTimer = 1;
        this.legSprite[0] = "legsAir" + floor(this.legTimer);
        if (abs(this.turnTimer) < 0.5) {
            this.legSprite[0] += "Turn";
        }
        this.wingTimer += 4.5;
        this.legTimer += 0.2;
    }
    if (this.wingTimer > 20) {
        this.wingTimer = 0;
    }
    if (floor(this.legTimer) >= 4) {
        this.legTimer = 1;
    }

    /*for (var i = 0; i < 3; i++) {
        //this.legPos[i].x = round(this.legPos[i].xTo + this.velX * -this.dir) * random(0.9, 1.1);
        if (!this.legPos[i].isAnimating) {
            this.legPos[i].x -= abs(round(this.velX * random(0.9, 1.1)));
        }
        this.legPos[i].velY += 0.4;
        this.legPos[i].y += this.legPos[i].velY;

        if (this.legPos[i].y >= 21) {
            this.legPos[i].velY = 0;
            this.legPos[i].y = 21;
        }

        if (dist(this.legPos[i].x, 0, this.legPos[i].xTo, 0) > this.legPos[i].maxDist && !this.legPos[i].isAnimating) {
            //this.legPos[i].x = this.legPos[i].xTo2;
            this.legPos[i].xTo2 = this.legPos[i].xTo + round(random(3, 7));
            this.legPos[i].isAnimating = true;
            this.legPos[i].velY = -2.6;
        } else if (this.velX == 0 || !this.isGrounded) {
            this.legPos[i].x = this.legPos[i].xTo;
            this.legPos[i].isAnimating = false;
        } else if (this.legPos[i].isAnimating) {
            if (this.legPos[i].x < this.legPos[i].xTo2) {
                this.legPos[i].x += abs(round(this.velX));
            } else {
                this.legPos[i].isAnimating = false;
                this.legPos[i].x = this.legPos[i].xTo2;
            }
        }
        this.legPos[i].lastX = this.x;
        if (this.legPos[i].x < round(this.legPos[i].xTo)) {
            this.legPos[i].x++;
        } else if (this.legPos[i].x > round(this.legPos[i].xTo)) {
            this.legPos[i].x--;
        }
    }*/
    if (cutscene.timer > 10) {
        if (floor(cutscene.timer) == 100) {
            playSound("redFlyBossScream");
        }
        this.bodySprite[0] = "hatch" + floor(this.hatchTimer);
        if (this.hatchTimer >= 11 && this.hatchTimer < 11.5) {
            shakeScreen(2, 2, 1, 2, 20);
        }

        if (this.hatchTimer >= 4 && this.hatchTimer < 5 || this.hatchTimer >= 9) {
            this.hatchTimer -= 0.15;
            if (this.skipCutscene) {this.hatchTimer += 0.15;}
            if (this.hatchTimer < 5 || this.hatchTimer >= 10) {
                this.hatchTimer -= 0.04;
                if (this.skipCutscene) {this.hatchTimer -= 0.05;}
            }
        }
        this.hatchTimer += 0.2;
        if (this.skipCutscene) {this.hatchTimer += 0.2;}
        if (this.hatchTimer > 11.5) {
            this.hatchTimer = 11.5;
        }
    }
    if (this.ded) {
        for (var i = 0; i < enemies.length; i++) {
            if (enemies[i].x == 402 && enemies[i].y == 176 && enemies[i].w == 28 && enemies[i].h == 48) {
                enemies[i].opening = -0.5;
            }
        }
        saveData.spawnLocations[0] = 224;
        saveData.spawnLocations[1] = 192;
        saveData.bosses.redFlyBoss = true;
        saveGame(saveFile);
    }
    this.shakePosX1 = ((this.shaking) ? random(-1, 1) : 0);
    this.shakePosX2 = ((this.shaking) ? random(-1, 1) : 0);
    this.shakePosX3 = ((this.shaking) ? random(-1, 1) : 0);
    this.shakePosX4 = ((this.shaking) ? random(-1, 1) : 0);
};

redFlyBoss.prototype.draw = function() {
    if (checkBlinking(this)) {
        //body
        save();
        translate(this.x + this.shakePosX1, this.y);
        if (this.dir < 0) {translate(this.w, 0);}
        scale(this.dir, 1);
        image("redFlyBossSprites", redFlyBossImgs[this.bodySprite[0]], this.bodySprite[1], this.bodySprite[2]);
        restore();
        if (cutscene.timer > 10 && this.skipCutscene) {
            cutscene.timer = 0;
            this.attackTimer = 30;
            this.hatchTimer = 11.5;
            musicPlaying.nextTrack = "musicRedFlyBoss";
            musicPlaying.volumeTo = 0.55;
            resetSound("musicRedFlyBoss");
            musicPlaying.smoothTransition = false;
        }
      if (cutscene.timer <= 10) {
        //head
        save();
        translate(this.x + this.shakePosX4, this.y);
        if (this.dir < 0) {translate(this.w, 0);}
        scale(this.dir, 1);
        image("redFlyBossSprites", redFlyBossImgs[this.headSprite[0]], this.headSprite[1], this.headSprite[2]);
        restore();

        //wings
        if (this.wingSprite1[0] != 0) {
            save();
            translate(this.x + this.shakePosX2, this.y);
            if (this.dir < 0) {translate(this.w, 0);}
            if (this.wingTimer >= 10) {
                translate(0, 10);
            }
            scale(this.dir, (this.wingTimer < 10) ? 1 : -1);
            image("redFlyBossSprites", redFlyBossImgs[this.wingSprite1[0]], this.wingSprite1[1], this.wingSprite1[2]);
            restore();
        }

        //wings 2
        if (this.wingTimer < 10 && this.wingSprite2[0] != 0) {
            save();
            translate(this.x + this.shakePosX3, this.y);
            if (this.dir < 0) {translate(this.w, 0);}
            scale(this.dir, 1);
            image("redFlyBossSprites", redFlyBossImgs[this.wingSprite2[0]], this.wingSprite2[1], this.wingSprite2[2]);
            restore();
        }

        //legs
        /*save();
        translate(round(this.x) + ((this.shaking) ? random(-1, 1) : 0), round(this.y));
        if (this.dir < 0) {translate(this.w, 0);}
        scale(this.dir, 1);
        fill(237, 38, 36);
        bline(8, 13, this.legPos[0].x, round(this.legPos[0].y));
        bline(15, 14, this.legPos[1].x, round(this.legPos[1].y));
        bline(23, 12, this.legPos[2].x, round(this.legPos[2].y));
        restore();*/

        //legs
        save();
        translate(this.x + this.shakePosX4, this.y);
        if (this.dir < 0) {translate(this.w, 0);}
        scale(this.dir, 1);
        image("redFlyBossSprites", redFlyBossImgs[this.legSprite[0]], this.legSprite[1], this.legSprite[2]);
        restore();

        fill(0, 0, 255, 0.5);
        //rect(this.spitX, this.spitY, 12, 12);
        //text8(floor(this.x), this.x, this.y - 20, 1);
        //rect(this.x + 2, this.y + 4, this.w - 4, this.h - 4);
      }
    }
};

redFlyBoss.prototype.takeDamage = function(amount, kb) {
    this.hp -= amount;
    takeKb(this, kb);
    var hpRange = 1;
    if (this.hp < 8) {
        hpRange = 3;
    } else if (this.hp < 19) {
        hpRange = 2;
    }
    playSound("redFlyBossDamage" + hpRange);
};

redFlyBoss.prototype.wallTop = function() {
    this.velY = 0;
    this.isGrounded = true;
};
redFlyBoss.prototype.wallLeft = function() {
    this.velX = 0;
    if (this.attack == 4) {
        shakeScreen(2, 1, 2, 1, 10);
        playSound("redFlyBossLand");
    }
};
redFlyBoss.prototype.wallRight = function() {
    this.velX = 0;
    if (this.attack == 4) {
        shakeScreen(2, 1, 2, 1, 10);
        playSound("redFlyBossLand");
    }
};
redFlyBoss.prototype.wallBottom = function() {this.velY = 0;};

/*
Make head collide with walls
redFlyBoss.prototype.extraCheck = function() {};
*/

const redFlyBossCacoon = function(x, y) {
    this.x = x + 26;
    this.y = y + 36;
    this.x2 = x;
    this.y2 = y;
    this.velX = 0;
    this.velY = 0;
    this.w = 36;
    this.h = 25;
    this.immuneTimers = [-10, -10];
    this.inWater = false;
    this.spriteTimer = 1;
    this.fallSprite = 1;
    this.isDed = false;
    this.sprite = "cacoon1";
    this.sprite2 = 0;
    this.falling = false;
    this.spriteDir = 1;

    if (saveData.bosses.redFlyBoss) {
        this.spriteTimer = 19;
        this.isDed = true;
        this.falling = true;
        this.sprite = "cacoon19";
        if (!saveData.flasks.unlocked[1]) {
            enemies.push(new drinkPickup(227,207,1));
        }
    }
};

redFlyBossCacoon.prototype.run = function() {
    this.sprite = "cacoon" + floor(this.spriteTimer);
  if (this.falling) {
    this.spriteTimer += 0.25;
    this.sprite2 = 0;
    if (this.isDed) {
        this.velY = 0;
        this.y = -200;
    }
    this.y += this.velY;
    checkCollisions(this);
    if (floor(this.spriteTimer) == 10) {
        playSound("redFlyHatch", 0.4);
    }
    if (floor(this.spriteTimer) >= 11) {
        this.spriteTimer += 0.1;
        if (this.spriteTimer >= 15) {
            this.spriteTimer -= 0.3;
        }
        this.spriteTimer = constrain(this.spriteTimer, 1, 19);
        if (!this.isDed) {
            this.sprite2 = "cacoonFall" + floor(this.fallSprite);
        }
        this.fallSprite += 0.25;
        if (this.fallSprite >= 3) {
            this.fallSprite = 1;
        }
        this.velY += 0.2;
    }
  } else {
    this.spriteTimer += this.spriteDir * 0.04;
    if (this.spriteTimer > 4.9) {
        this.spriteTimer = 4.9;
        this.spriteDir = -1;
    } else if (this.spriteTimer < 1) {
        this.spriteTimer = 1;
        this.spriteDir = 1;
    }
    if (cutscene.type == "redFlyBossIntro" && cutscene.timer <= 400) {
        this.falling = true;
    }
  }
};

redFlyBossCacoon.prototype.draw = function() {
    image("redFlyAssets", redFlyBossImgs[this.sprite], this.x2, this.y2);
    if (this.sprite2 != 0) {
        image("redFlyAssets", redFlyBossImgs[this.sprite2], this.x, floor(this.y));
    }
};

redFlyBossCacoon.prototype.wallTop = function() {
    this.isDed = true;
    enemies.push(new redFlyBoss(this.x, this.y));
    this.y = -200;
    playSound("redFlyEggsHurt");
};

var redFlyBossDoor = function(x, y) {
    this.x = x;
    this.y = y;
    this.w = 28;
    this.h = 48;
    this.opened = 0;
    this.opening = 0;
    this.closed = false;
    this.immuneTimers = [-10, -10];
    this.inWater = false;
    this.lastPlayed = 0;
};

redFlyBossDoor.prototype.run = function() {
    this.opened += this.opening;
    if (this.lastPlayed != 1 && this.opening >= 0.5) {
        playSound("doorSlam", 0.3);
        this.lastPlayed = 1;
    } else if (this.lastPlayed != 0 && this.opening < 0.5) {
        playSound("doorOpen", 0.1);
        this.lastPlayed = 0;
    }
    this.opened = constrain(this.opened, 0, 3.99);
    if (players[0].x < 350 && !this.closed && !saveData.bosses.redFlyBoss) {
        this.closed = true;
        this.opening = 0.5;
        resetCutscene();
        cutscene.timer = 500;
        cutscene.type = "redFlyBossIntro";
    }
};
redFlyBossDoor.prototype.collider = function(p) {
    if (floor(this.opened) > 0) {
        collider(this.x - 2, this.y, this.w, this.h, p);
    }
};

redFlyBossDoor.prototype.draw = function() {};
redFlyBossDoor.prototype.drawFront = function() {
    if (floor(this.opened) > 0) {
        fill(255, 255, 255);
        rect(this.x - 1, this.y - 4, 1, 4);
        rect(this.x + this.w - 2, this.y - 4, 1, 4);
        rect(this.x, this.y + this.h, 1, 4);
        rect(this.x + this.w - 2, this.y + this.h, 1, 4);
        image("redFlyAssets", redFlyBossImgs["door" + floor(this.opened)], this.x - 1, this.y);
    }
};

