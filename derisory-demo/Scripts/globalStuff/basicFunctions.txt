var getId = function(getId) {
    return document.getElementById(getId);
};

const canvas = document.getElementById("canva");
const can = canvas.getContext("2d");
const bufferCanvas = document.getElementById("bufferCanvas");
const bufferCan = bufferCanvas.getContext("2d");

var bufferImage = function(src, slices, x, y, w, h) {
    if (slices.shiftX != undefined) {
        x += slices.shiftX;
        y += slices.shiftY;
    }
    if (w == undefined) {
        w = slices.w;
        h = slices.h;
    }
    bufferCan.drawImage(getId(src), slices.x, slices.y, slices.w, slices.h, x, y, w, h);
};

function generateBag(bag) {
    var bagLength = bag.length;
    var newBag = [];
    for (var i = 0; i < bagLength; i++) {
        var pickBag = floor(random(0, bag.length - 1));
        newBag.push(bag[pickBag]);
        bag.splice(pickBag, 1);
    }
    return newBag;
};

function checkBlinking(obj) {
    var returner = false;
    if (obj.immuneTimers[1] <= 0 && obj.immuneTimers[0] == round(obj.immuneTimers[0] / 2) * 2 || dramaticTimer > 0 || players[0].hp <= 0 || paused || inventoryOpened || inventoryFade > 0) {
        returner = true;
    }
    return returner;
};

function fullscreen() {
    //Couldn't find SO link for this portion but it is SUPER general so I think it is fair use.
    if (canvas.webkitRequestFullScreen) {
        canvas.webkitRequestFullScreen();
    } else {
        canvas.mozRequestFullScreen();
    }
    //Couldn't find SO link for this portion but it is SUPER general so I think it is fair use.
    resizeScreen(round(window.innerWidth / 455) + 1);//This line is mine though
}
//canvas.addEventListener("click", fullscreen);

can.imageSmoothingEnabled = false;


var rect = function(x, y, w, h) {
can.fillRect(x, y, w, h);
};

var line = function(x1, y1, x2, y2) {
can.beginPath();
can.moveTo(x1, y1);
can.lineTo(x2, y2);
can.closePath();
can.strokeStyle = can.fillStyle;
can.stroke();
};

var triangle = function(x1, y1, x2, y2, x3, y3) {
can.beginPath();
can.moveTo(x1, y1);
can.lineTo(x2, y2);
can.lineTo(x3, y3);
can.closePath();
can.fill();
};

var fill = function(r, g, b, a) {
if (a === undefined) {
a = 1;
}
can.fillStyle = "rgb(" + r + "," + g + "," + b + "," + a + ")";
};

var font = function(siz) {
    can.font = siz;
};
var textAlign = function(ali) {
    can.textAlign = ali;
};
var text = function(txt, x, y, w, h) {
    can.fillText(txt, x, y, w, h);
};

var image = function(src, slices, x, y, w, h) {
  if (slices != undefined) {
    if (slices.shiftX != undefined) {
        x += slices.shiftX;
        y += slices.shiftY;
    }

    if (w == undefined) {
        w = slices.w;
        h = slices.h;
    }
    can.drawImage(getId(src), slices.x, slices.y, slices.w, slices.h, x, y, w, h);
  }
};

var singleImage = function(src, x, y, w, h) {
    var w2 = w;
    var h2 = h;
    if (w == undefined) {w2 = src.width;}
    if (h == undefined) {h2 = src.height;}
    can.drawImage(src, x, y, w2, h2);
};

var talk = function(t) {
var msg = new SpeechSynthesisUtterance();

var voices = window.speechSynthesis.getVoices();
msg.volume = 1;

msg.rate = 1;

msg.pitch = 1;

msg.text = t;

speechSynthesis.speak(msg);
};

//Algebraic stuff
var sin = function(v) {
    return Math.sin(v);
};
var cos = function(v) {
    return Math.cos(v);
};
var abs = function(v) {
    return Math.abs(v);
};
var dist = function(x1, y1, x2, y2) {
    var distance = ((x1 - x2)*(x1 - x2)) + ((y1 - y2)*(y1 - y2));
    return Math.sqrt(abs(distance));
};

//Integer stuff
var round = function(v) {
return Math.round(v);
};
var floor = function(v) {
return Math.floor(v);
};
var ceil = function(v) {
return Math.ceil(v);
};
var random = function(min, max) {
return (Math.random() * (max - min)) + min;
};
var constrain = function(value, min, max) {
if (value < min) {
    value = min;
} else if (value > max) {
    value = max;
}

return value;
};

var save = function() {can.save();};
var translate = function(x, y) {can.translate(x, y);};
var scale = function(w, h) {can.scale(w, h);}
var rotate = function(angles) {can.rotate(angles*Math.PI/180);}
var restore = function() {can.restore();};

//Pixel Text:
var alphabet = " ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz:.1234567890?!,'";
var texts = [
[],//SPACEBAR
["00111","011011","1100011","1100011","1111111","1100011","1100011"],["111111","1100011","1100011","111111","1100011","1100011","111111"],//A,B,
["001111","0110011","11","11","11","0110011","001111"],["11111","110011","1100011","1100011","1100011","110011","11111"],//C,D
["1111111","11","11","111111","11","11","1111111"],["1111111","11","11","111111","11","11","11"],//E,F
["0011111","011","11","1100111","1100011","0110011","0011111"],["1100011","1100011","1100011","1111111","1100011","1100011","1100011"],//G,H
["111111","0011","0011","0011","0011","0011","111111"],["0000011","0000011","0000011","0000011","0000011","0110011","0011110"],//I,J
["1100011","110011","11011","1111","11111","110111","1100111"],["11","11","11","11","11","11","1111111"],//K,L
["1100011","1110111","1111111","1101011","1101011","1100011","1100011",],["1100011","1110011","1111011","1101111","1100111","1100011","1100011",],//M,N
["011111","1100011","1100011","1100011","1100011","1100011","011111",],["111111","1100011","1100011","1100011","111111","11","11",],//O,P
["011111","1100011","1100011","1100011","1101111","1100110","0111101",],["111111","1100011","1100011","1100111","11111","110111","1100111",],//Q,R
["011111","1100011","11","011111","0000011","1100011","011111",],["111111","001100","001100","001100","001100","001100","001100",],//S,T
["1100011","1100011","1100011","1100011","1100011","1100011","011111"],["1100011","1100011","1100011","1110111","011111","00111","0001"],//U,V
["1101011","1101011","1101011","1101011","1111111","1110111","010001",],["1100011","1100011","011011","001110","011011","1100011","1100011",],//W,X
["110011","110011","110011","011110","0011","0011","0011",],["1111111","0000111","000111","001110","011100","111000","1111111",],//Y,Z,


["","","011111","0000011","0111111","1100011","0111111"],["11","11","111111","1100011","1100011","1100011","011111"],//a,b,
["","","0111111","11","11","11","0111111"],["0000011","0000011","0111111","1100011","1100011","1100011","011111"],//c,d,
["","","011111","1100011","1111111","11","011111"],["0000111","00011","0111111","00011","00011","00011","00011",],//e,f,
["","","0111111","1100011","1100011","0111111","0000011","011111"],["11","11","111111","1100011","1100011","1100011","1100011",],//g,h,
["0011","","0111","0011","0011","0011","111111"],["0011","","0111","0011","0011","0011","0011","111"],//i,j,
["11","11","1100011","110011","11111","110011","1100011",],["0111","0011","0011","0011","0011","0011","111111"],//k,l,
["","","111111","1011011","1011011","1011011","1011011"],["","","111111","1100011","1100011","1100011","1100011"],//m,n,
["","","011111","1100011","1100011","1100011","011111",],["","","111111","1100011","1100011","111111","11","11",],//o,p,
["","","0111111","1100011","1100011","0111111","0000011","0000011",],["","","110111","111","11","11","11"],//q,r,
["","","011111","11","011111","0000011","111111",],["001100","001100","111111","001100","001100","001100","001100",],//s,t,
["","","1100011","1100011","1100011","1100011","0111111"],["","","110011","110011","110011","01111","0011"],//u,v,
["","","1101011","1101011","1101011","1101011","011011"],["","","1100011","011011","00111","011011","1100011"],//w,x,
["","","1100011","1100011","1100011","0111111","0000011","011111"],["","","1111111","000111","00111","0111","1111111"],//y,z,

["","011","011","","011","011"],["","","","","","011","011"],//: .

["0011","0111","0011","0011","0011","0011","111111"],["011111","1100011","0000111","001111","01111","111","1111111"],//1,2
["0111111","000011","00011","001111","0000011","1100011","011111"],["000111","001111","011011","110011","1111111","000011","000011"],//3,4
["111111","11","111111","0000011","0000011","1100011","011111"],["001111","011","11","111111","1100011","1100011","011111"],//5,6
["1111111","1100011","000011","00011","0011","0011","0011"],["01111","110001","111001","01111","1001111","1000011","011111"],//7,8
["011111","1100011","1100011","0111111","0000011","000011","01111"],["00111","010011","1100011","1100011","1100011","011001","00111"],//9,0
["0111110","1111111","1100011","0000110","0011100","0000000","0011100",],["0001110","0001110","0001110","0001100","0001100","0000000","0001100",],//?, !
["","","","","","011","011","110"],["000110","000110","000110",],//, , '
];

var letter8 = function(letter, x, y, siz) {
    var myLet = 0;
    for (var i = 0; i < alphabet.length; i++) {
        if (letter == alphabet[i]) {
            myLet = i;
        } else {
            continue;
        }
    }

    for (var i = 0; i < texts[myLet].length; i++) {
        for (var j = 0; j < texts[myLet][i].length; j++) {
            if (texts[myLet][i][j] == "1") {
                rect((j * siz) + x, (i * siz) + y, siz, siz);
            }
        }
    }
};
function text8(txt, x, y, siz, a) {
    txt = JSON.stringify(txt);
    //x -= siz * 8;
    if (a == undefined) {
        for (var i = 0; i < txt.length; i++) {
            letter8(txt[i], x + (i * (siz * 8)), y, siz);
        }
    } else {
        for (var i = 0; i < txt.length; i++) {
            letter8(txt[i], floor(x + (i * (siz * 8)) - ((txt.length / 2) * (siz * 8))), y, siz);
        }
    }
};//End of text8();

function textScroll(txt, leLimit, x, y, siz, a) {
    if (leLimit >= 0) {
        txt = txt.substr(0, leLimit);
    }
    txt = txt.split('^');
    //alert(txt.length);
    //alert(txt[0]);
    for (var i = 0; i < txt.length; i++) {
        txt[i] = JSON.stringify(txt[i]);
        text8(txt[i], x /*- siz * 16*/, y + i * (siz * 9), siz, a);
    }
};

//https://jsfiddle.net/m1erickson/3j7hpng0/
// Refer to: http://rosettacode.org/wiki/Bitmap/Bresenham's_line_algorithm#JavaScript
function bline(x0, y0, x1, y1) {
    var dx = Math.abs(x1 - x0),
        sx = x0 < x1 ? 1 : -1;
    var dy = Math.abs(y1 - y0),
        sy = y0 < y1 ? 1 : -1;
    var err = (dx > dy ? dx : -dy) / 2;
    while (true) {
        rect(round(x0 - 1), round(y0), 1, 1);
        if (x0 === x1 && y0 === y1) break;
        var e2 = err;
        if (e2 > -dx) {
            err -= dy;
            x0 += sx;
        }
        if (e2 < dy) {
            err += dx;
            y0 += sy;
        }
    }
};